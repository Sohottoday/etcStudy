# 문제 유형 : 그리디

# 문제
# 세준이는 도서관에서 일한다. 도서관의 개방시간이 끝나서 세준이는 사람들이 마구 놓은 책을 다시 가져다 놓아야 한다. 
# 세준이는 현재 0에 있고, 사람들이 마구 놓은 책도 전부 0에 있다. 
# 각 책들의 원래 위치가 주어질 때, 책을 모두 제자리에 놔둘 때 드는 최소 걸음 수를 계산하는 프로그램을 작성하시오. 
# 세준이는 한 걸음에 좌표 1칸씩 가며, 책의 원래 위치는 정수 좌표이다. 
# 책을 모두 제자리에 놔둔 후에는 다시 0으로 돌아올 필요는 없다. 그리고 세준이는 한 번에 최대 M권의 책을 들 수 있다.

# 입력
# 첫째 줄에 책의 개수 N과, 세준이가 한 번에 들 수 있는 책의 개수 M이 주어진다. 
# 둘째 줄에는 책의 위치가 주어진다. N은 10,000보다 작거나 같은 자연수이고, M은 10,000보다 작거나 같다. 
# 책의 위치는 0이 아니며, 그 절댓값이 10,000보다 작거나 같다.

# 출력
# 첫째 줄에 정답을 출력한다.

# 예제 입력 1 
# 7 2
# -37 2 -6 -39 -29 11 -28
# 예제 출력 1 
# 131

## 문제 풀이 핵심 아이디어
## 0보다 큰 책들과 0보다 작은 책들을 나누어서 처리
## 2개의 우선순위 큐를 이용하여 문제를 효과적으로 해결
## 마지막 책을 놓을 때 다시 0으로 돌아올 필요가 없으므로, 가장 먼 책을 마지막으로 놓는다.
## 음수와 양수에 대하여 개별적으로 M개씩 묶어서 처리
## M개씩의 묶음 중에서 가장 거리가 먼 책만큼 이동해야 한다.
## 가장 먼 책을 마지막에 놓는 이유는 0으로 돌아올 필요가 없으므로 편도거리만큼 이동할 필요가 없기 때문
## 위 예제 입력을 기준으로 (39+29+6+11) * 2 = 170 에서 가장 먼 곳에서 돌아오는 39만큼을 빼준다. -> 170-39 = 131(정답)

import heapq

n, m = map(int, input().split(' '))
array = list(map(int, input().split(' ')))
positive = []   # 양수 우선순위 큐
negative = []   # 음수 우선순위 큐

# 가장 거리가 먼 책까지의 거리
largest = max(max(array), -min(array))

# 최대 힙(Max Heap)을 위해 원소를 음수로 구성
for i in array:
    # 책의 위치가 양수인 경우
    if i > 0:
        heapq.heappush(positive, -i)            # -i로 넣었으므로 positive 배열에도 모든 값이 음수로 들어간다.
    # 책의 위치가 음수인 경우
    else:
        heapq.heappush(negative, i)

result = 0

while positive:
    # 한 번에 m개씩 옮길 수 있으므로 m개씩 빼내기
    result += heapq.heappop(positive)       # 가장 거리가 먼 부분을 먼저 뽑아야 하므로
    for _ in range(m-1):
        if positive:
            heapq.heappop(positive)

while negative:
    # 한 번에 m개씩 옮길 수 있으므로 m개씩 빼내기
    result += heapq.heappop(negative)
    for _ in range(m - 1):
        if negative:
            heapq.heappop(negative)

# 일반적으로 왕복 거리를 계산하지만, 가장 먼 곳은 편도 제외 계산
print(-result*2 - largest)